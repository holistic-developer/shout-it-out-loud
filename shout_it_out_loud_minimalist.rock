counter is abcdefghi abcdefg       (counter = 97)
bound is a ab ab                   (bound = 122)
diff is abc ab                     (diff = 32)
Until counter is higher than bound (loop until counter > bound)
cast counter into key              (key = counter cast to character)
let upper be counter without diff  (upper = counter - diff)
cast upper into value              (value = upper cast to character)
let mapping at key be value        (mapping[key] = value)
build counter up                   (counter++)
                                   (close until loop)
listen to input                    (read stdin into input)
split input into chars             (split string into character array)
rock result                        (initialize empty array: result)
while chars ain't nothing          (while array size > 0)
roll chars into char               (pop top element)
let upper be mapping at char       (upper = mapping[char])
if upper is nothing                (if no value was found; upper = null)
put char into upper                (upper = char)
                                   (end if)
rock upper into result             (push upper into result list)
                                   (close while loop)
join result                        (convert char array to string)
say result                         (print result to stdout)